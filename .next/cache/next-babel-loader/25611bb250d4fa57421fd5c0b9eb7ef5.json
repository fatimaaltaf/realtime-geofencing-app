{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Fragment, Component } from 'react';\nimport { Marker, Circle } from 'react-google-maps'; // The UserMarker component stores the position of the current active user in the position property of the component’s state.\n\nvar UserMarker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UserMarker, _Component);\n\n  function UserMarker(props) {\n    var _this;\n\n    _classCallCheck(this, UserMarker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserMarker).call(this, props));\n    var _this$props = _this.props,\n        _this$props$person = _this$props.person,\n        _this$props$person$id = _this$props$person.id,\n        id = _this$props$person$id === void 0 ? null : _this$props$person$id,\n        _this$props$person$po = _this$props$person.position,\n        position = _this$props$person$po === void 0 ? null : _this$props$person$po,\n        _this$props$channel = _this$props.channel,\n        channel = _this$props$channel === void 0 ? null : _this$props$channel;\n    _this.id = id;\n    _this.channel = channel;\n    _this.state = {\n      position: position\n    };\n    return _this;\n  } // we bind to the transit event on the Pusher channel, and update the state with the new position of the user. \n  // We only update the state when the current user’s position changes.\n\n\n  _createClass(UserMarker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.channel && this.channel.bind('transit', function (_ref) {\n        var _ref$person = _ref.person,\n            person = _ref$person === void 0 ? {} : _ref$person;\n        var id = person.id,\n            position = person.position;\n        id === _this2.id && _this2.setState({\n          position: position\n        });\n      });\n    } // we render a red marker icon for the currently active user by setting the MARKER_ICON constant as the marker icon URL.\n    // We also render a Circle region using the user’s current position as center and the radius received as prop.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var radius = this.props.radius;\n      var position = this.state.position;\n      var regionOptions = {\n        fillOpacity: 0.1,\n        strokeWidth: 1,\n        strokeOpacity: 0.2\n      };\n      var MARKER_SIZE = new google.maps.Size(50, 70);\n      var MARKER_ICON = 'https://i.imgur.com/Rhv5xQh.png';\n      return __jsx(Fragment, null, __jsx(Marker, {\n        position: position,\n        title: \"You\",\n        options: {\n          icon: {\n            url: MARKER_ICON,\n            scaledSize: MARKER_SIZE\n          }\n        }\n      }), __jsx(Circle, {\n        center: position,\n        radius: radius,\n        options: regionOptions\n      }));\n    }\n  }]);\n\n  return UserMarker;\n}(Component);\n\n;\nexport default UserMarker;","map":null,"metadata":{},"sourceType":"module"}