{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment, Component } from 'react';\nimport { Marker, Circle } from 'react-google-maps'; // The UserMarker component stores the position of the current active user in the position property of the component’s state.\n\nclass UserMarker extends Component {\n  constructor(props) {\n    super(props);\n    const {\n      person: {\n        id = null,\n        position = null\n      },\n      channel = null\n    } = this.props;\n    this.id = id;\n    this.channel = channel;\n    this.state = {\n      position\n    };\n  } // we bind to the transit event on the Pusher channel, and update the state with the new position of the user. \n  // We only update the state when the current user’s position changes.\n\n\n  componentDidMount() {\n    this.channel && this.channel.bind('transit', ({\n      person = {}\n    }) => {\n      const {\n        id,\n        position\n      } = person;\n      id === this.id && this.setState({\n        position\n      });\n    });\n  } // we render a red marker icon for the currently active user by setting the MARKER_ICON constant as the marker icon URL.\n  // We also render a Circle region using the user’s current position as center and the radius received as prop.\n\n\n  render() {\n    const {\n      radius\n    } = this.props;\n    const {\n      position\n    } = this.state;\n    const regionOptions = {\n      fillOpacity: 0.1,\n      strokeWidth: 1,\n      strokeOpacity: 0.2\n    };\n    const MARKER_SIZE = new google.maps.Size(50, 70);\n    const MARKER_ICON = 'https://i.imgur.com/Rhv5xQh.png';\n    return __jsx(Fragment, null, __jsx(Marker, {\n      position: position,\n      title: \"You\",\n      options: {\n        icon: {\n          url: MARKER_ICON,\n          scaledSize: MARKER_SIZE\n        }\n      }\n    }), __jsx(Circle, {\n      center: position,\n      radius: radius,\n      options: regionOptions\n    }));\n  }\n\n}\n\n;\nexport default UserMarker;","map":{"version":3,"sources":["/Users/fatimaaltaf/lighthouse/google_api/realtime-geofencing-app/components/UserMarker.js"],"names":["React","Fragment","Component","Marker","Circle","UserMarker","constructor","props","person","id","position","channel","state","componentDidMount","bind","setState","render","radius","regionOptions","fillOpacity","strokeWidth","strokeOpacity","MARKER_SIZE","google","maps","Size","MARKER_ICON","icon","url","scaledSize"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,mBAA/B,C,CAEA;;AAEE,MAAMC,UAAN,SAAyBH,SAAzB,CAAmC;AAEjCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,UAAM;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,EAAE,GAAG,IAAP;AAAaC,QAAAA,QAAQ,GAAG;AAAxB,OAAV;AAA0CC,MAAAA,OAAO,GAAG;AAApD,QAA6D,KAAKJ,KAAxE;AAEA,SAAKE,EAAL,GAAUA,EAAV;AACA,SAAKE,OAAL,GAAeA,OAAf;AACA,SAAKC,KAAL,GAAa;AAAEF,MAAAA;AAAF,KAAb;AACD,GATgC,CAWjC;AACA;;;AACAG,EAAAA,iBAAiB,GAAG;AAClB,SAAKF,OAAL,IAAgB,KAAKA,OAAL,CAAaG,IAAb,CAAkB,SAAlB,EAA6B,CAAC;AAAEN,MAAAA,MAAM,GAAG;AAAX,KAAD,KAAqB;AAChE,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA;AAAN,UAAmBF,MAAzB;AACCC,MAAAA,EAAE,KAAK,KAAKA,EAAb,IAAoB,KAAKM,QAAL,CAAc;AAAEL,QAAAA;AAAF,OAAd,CAApB;AACD,KAHe,CAAhB;AAID,GAlBgC,CAoBjC;AACA;;;AACAM,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEC,MAAAA;AAAF,QAAa,KAAKV,KAAxB;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAe,KAAKE,KAA1B;AACA,UAAMM,aAAa,GAAG;AAAEC,MAAAA,WAAW,EAAE,GAAf;AAAoBC,MAAAA,WAAW,EAAE,CAAjC;AAAoCC,MAAAA,aAAa,EAAE;AAAnD,KAAtB;AAEA,UAAMC,WAAW,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,IAAhB,CAAqB,EAArB,EAAyB,EAAzB,CAApB;AACA,UAAMC,WAAW,GAAG,iCAApB;AAEA,WAAO,MAAC,QAAD,QACL,MAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEhB,QAAlB;AAA4B,MAAA,KAAK,EAAC,KAAlC;AAAwC,MAAA,OAAO,EAAE;AAAEiB,QAAAA,IAAI,EAAE;AAAEC,UAAAA,GAAG,EAAEF,WAAP;AAAoBG,UAAAA,UAAU,EAAEP;AAAhC;AAAR;AAAjD,MADK,EAEL,MAAC,MAAD;AAAQ,MAAA,MAAM,EAAEZ,QAAhB;AAA0B,MAAA,MAAM,EAAEO,MAAlC;AAA0C,MAAA,OAAO,EAAEC;AAAnD,MAFK,CAAP;AAKD;;AApCgC;;AAqClC;AAED,eAAeb,UAAf","sourcesContent":["import React, { Fragment, Component } from 'react';\nimport { Marker, Circle } from 'react-google-maps';\n\n// The UserMarker component stores the position of the current active user in the position property of the component’s state.\n\n  class UserMarker extends Component {\n\n    constructor(props) {\n      super(props);\n      const { person: { id = null, position = null }, channel = null } = this.props;\n\n      this.id = id;\n      this.channel = channel;\n      this.state = { position };\n    }\n\n    // we bind to the transit event on the Pusher channel, and update the state with the new position of the user. \n    // We only update the state when the current user’s position changes.\n    componentDidMount() {\n      this.channel && this.channel.bind('transit', ({ person = {} }) => {\n        const { id, position } = person;\n        (id === this.id) && this.setState({ position });\n      });\n    }\n\n    // we render a red marker icon for the currently active user by setting the MARKER_ICON constant as the marker icon URL.\n    // We also render a Circle region using the user’s current position as center and the radius received as prop.\n    render() {\n\n      const { radius } = this.props;\n      const { position } = this.state;\n      const regionOptions = { fillOpacity: 0.1, strokeWidth: 1, strokeOpacity: 0.2 };\n\n      const MARKER_SIZE = new google.maps.Size(50, 70);\n      const MARKER_ICON = 'https://i.imgur.com/Rhv5xQh.png';\n\n      return <Fragment>\n        <Marker position={position} title=\"You\" options={{ icon: { url: MARKER_ICON, scaledSize: MARKER_SIZE } }} />\n        <Circle center={position} radius={radius} options={regionOptions} />\n      </Fragment>\n\n    }\n  };\n\n  export default UserMarker;"]},"metadata":{},"sourceType":"module"}