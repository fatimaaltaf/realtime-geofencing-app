{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Marker } from 'react-google-maps';\nconst BLACK_MARKER = 'https://i.imgur.com/8dOrls4.png?2';\nconst GREEN_MARKER = 'https://i.imgur.com/9v6uW8U.png'; // The PersonMarker component stores the position of the person in the position property of the component’s state \n// and the position of the current active user in the userPosition property of the state.\n\nclass PersonMarker extends Component {\n  constructor(props) {\n    super(props);\n    const {\n      user: {\n        id: userID,\n        position: userPosition\n      },\n      person: {\n        id = null,\n        position = null\n      },\n      channel = null\n    } = this.props;\n    this.id = id;\n    this.userID = userID;\n    this.channel = channel;\n    this.state = {\n      position,\n      userPosition\n    };\n  } // we bind to the transit event on the Pusher channel, and update the state with the new position of the person or currently active user. \n  // We update the state’s position when the person’s position changes, and the userPosition when the currently active user’s position changes.\n\n\n  componentDidMount() {\n    this.channel && this.channel.bind('transit', ({\n      person = {}\n    }) => {\n      const {\n        id,\n        position\n      } = person;\n      id === this.id && this.setState({\n        position\n      });\n      id === this.userID && this.setState({\n        userPosition: position\n      });\n    });\n  } // withinRegion() method received as prop to check if the person is within the defined circular region of the currently active user. \n  // We then conditionally render a green marker icon if the person is within the region, otherwise, we render a black icon.\n\n\n  render() {\n    const {\n      position,\n      userPosition\n    } = this.state;\n    const {\n      person: {\n        name\n      },\n      radius,\n      withinRegion = f => f\n    } = this.props;\n    const within = !!withinRegion(position)(userPosition, radius);\n    const MARKER_SIZE = new google.maps.Size(25, 35);\n    const MARKER_ICON = within ? GREEN_MARKER : BLACK_MARKER;\n    return __jsx(Marker, {\n      position: position,\n      title: name,\n      options: {\n        icon: {\n          url: MARKER_ICON,\n          scaledSize: MARKER_SIZE\n        }\n      }\n    });\n  }\n\n}\n\n;\nexport default PersonMarker;","map":{"version":3,"sources":["/Users/fatimaaltaf/lighthouse/google_api/realtime-geofencing-app/components/PersonMarker.js"],"names":["React","Component","Marker","BLACK_MARKER","GREEN_MARKER","PersonMarker","constructor","props","user","id","userID","position","userPosition","person","channel","state","componentDidMount","bind","setState","render","name","radius","withinRegion","f","within","MARKER_SIZE","google","maps","Size","MARKER_ICON","icon","url","scaledSize"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACI,SAASC,MAAT,QAAuB,mBAAvB;AAEA,MAAMC,YAAY,GAAG,mCAArB;AACA,MAAMC,YAAY,GAAG,iCAArB,C,CAEA;AACA;;AACA,MAAMC,YAAN,SAA2BJ,SAA3B,CAAqC;AAEnCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,UAAM;AACJC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,EAAE,EAAEC,MAAN;AAAcC,QAAAA,QAAQ,EAAEC;AAAxB,OADF;AAEJC,MAAAA,MAAM,EAAE;AAAEJ,QAAAA,EAAE,GAAG,IAAP;AAAaE,QAAAA,QAAQ,GAAG;AAAxB,OAFJ;AAGJG,MAAAA,OAAO,GAAG;AAHN,QAIF,KAAKP,KAJT;AAMA,SAAKE,EAAL,GAAUA,EAAV;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKI,OAAL,GAAeA,OAAf;AAEA,SAAKC,KAAL,GAAa;AAAEJ,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAb;AACD,GAhBkC,CAkBnC;AACA;;;AACAI,EAAAA,iBAAiB,GAAG;AAClB,SAAKF,OAAL,IAAgB,KAAKA,OAAL,CAAaG,IAAb,CAAkB,SAAlB,EAA6B,CAAC;AAAEJ,MAAAA,MAAM,GAAG;AAAX,KAAD,KAAqB;AAChE,YAAM;AAAEJ,QAAAA,EAAF;AAAME,QAAAA;AAAN,UAAmBE,MAAzB;AACCJ,MAAAA,EAAE,KAAK,KAAKA,EAAb,IAAoB,KAAKS,QAAL,CAAc;AAAEP,QAAAA;AAAF,OAAd,CAApB;AACCF,MAAAA,EAAE,KAAK,KAAKC,MAAb,IAAwB,KAAKQ,QAAL,CAAc;AAAEN,QAAAA,YAAY,EAAED;AAAhB,OAAd,CAAxB;AACD,KAJe,CAAhB;AAKD,GA1BkC,CA4BnC;AACA;;;AACAQ,EAAAA,MAAM,GAAG;AACP,UAAM;AAAER,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA6B,KAAKG,KAAxC;AACA,UAAM;AAAEF,MAAAA,MAAM,EAAE;AAAEO,QAAAA;AAAF,OAAV;AAAoBC,MAAAA,MAApB;AAA4BC,MAAAA,YAAY,GAAGC,CAAC,IAAIA;AAAhD,QAAsD,KAAKhB,KAAjE;AAEA,UAAMiB,MAAM,GAAG,CAAC,CAAEF,YAAY,CAACX,QAAD,CAAZ,CAAuBC,YAAvB,EAAqCS,MAArC,CAAlB;AAEA,UAAMI,WAAW,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,IAAhB,CAAqB,EAArB,EAAyB,EAAzB,CAApB;AACA,UAAMC,WAAW,GAAGL,MAAM,GAAGpB,YAAH,GAAkBD,YAA5C;AAEA,WAAO,MAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEQ,QAAlB;AAA4B,MAAA,KAAK,EAAES,IAAnC;AAAyC,MAAA,OAAO,EAAE;AAAEU,QAAAA,IAAI,EAAE;AAAEC,UAAAA,GAAG,EAAEF,WAAP;AAAoBG,UAAAA,UAAU,EAAEP;AAAhC;AAAR;AAAlD,MAAP;AACD;;AAxCkC;;AA0CpC;AAED,eAAepB,YAAf","sourcesContent":["import React, { Component } from 'react';\n    import { Marker } from 'react-google-maps';\n\n    const BLACK_MARKER = 'https://i.imgur.com/8dOrls4.png?2';\n    const GREEN_MARKER = 'https://i.imgur.com/9v6uW8U.png';\n\n    // The PersonMarker component stores the position of the person in the position property of the component’s state \n    // and the position of the current active user in the userPosition property of the state.\n    class PersonMarker extends Component {\n\n      constructor(props) {\n        super(props);\n\n        const {\n          user: { id: userID, position: userPosition },\n          person: { id = null, position = null },\n          channel = null\n        } = this.props;\n\n        this.id = id;\n        this.userID = userID;\n        this.channel = channel;\n\n        this.state = { position, userPosition };\n      }\n\n      // we bind to the transit event on the Pusher channel, and update the state with the new position of the person or currently active user. \n      // We update the state’s position when the person’s position changes, and the userPosition when the currently active user’s position changes.\n      componentDidMount() {\n        this.channel && this.channel.bind('transit', ({ person = {} }) => {\n          const { id, position } = person;\n          (id === this.id) && this.setState({ position });\n          (id === this.userID) && this.setState({ userPosition: position });\n        });\n      }\n\n      // withinRegion() method received as prop to check if the person is within the defined circular region of the currently active user. \n      // We then conditionally render a green marker icon if the person is within the region, otherwise, we render a black icon.\n      render() {\n        const { position, userPosition } = this.state;\n        const { person: { name }, radius, withinRegion = f => f } = this.props;\n\n        const within = !!(withinRegion(position)(userPosition, radius));\n\n        const MARKER_SIZE = new google.maps.Size(25, 35);\n        const MARKER_ICON = within ? GREEN_MARKER : BLACK_MARKER;\n\n        return <Marker position={position} title={name} options={{ icon: { url: MARKER_ICON, scaledSize: MARKER_SIZE } }} />\n      }\n\n    };\n\n    export default PersonMarker;"]},"metadata":{},"sourceType":"module"}