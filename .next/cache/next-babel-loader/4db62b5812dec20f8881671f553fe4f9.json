{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Fragment, Component } from 'react';\nimport { Marker, Circle } from 'react-google-maps'; // The UserMarker component stores the position of the current active user in the position property of the component’s state.\n\nvar UserMarker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UserMarker, _Component);\n\n  function UserMarker(props) {\n    var _this;\n\n    _classCallCheck(this, UserMarker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserMarker).call(this, props));\n    var _this$props = _this.props,\n        _this$props$person = _this$props.person,\n        _this$props$person$id = _this$props$person.id,\n        id = _this$props$person$id === void 0 ? null : _this$props$person$id,\n        _this$props$person$po = _this$props$person.position,\n        position = _this$props$person$po === void 0 ? null : _this$props$person$po,\n        _this$props$channel = _this$props.channel,\n        channel = _this$props$channel === void 0 ? null : _this$props$channel;\n    _this.id = id;\n    _this.channel = channel;\n    _this.state = {\n      position: position\n    };\n    return _this;\n  } // we bind to the transit event on the Pusher channel, and update the state with the new position of the user. \n  // We only update the state when the current user’s position changes.\n\n\n  _createClass(UserMarker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.channel && this.channel.bind('transit', function (_ref) {\n        var _ref$person = _ref.person,\n            person = _ref$person === void 0 ? {} : _ref$person;\n        var id = person.id,\n            position = person.position;\n        id === _this2.id && _this2.setState({\n          position: position\n        });\n      });\n    } // we render a red marker icon for the currently active user by setting the MARKER_ICON constant as the marker icon URL.\n    // We also render a Circle region using the user’s current position as center and the radius received as prop.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var radius = this.props.radius;\n      var position = this.state.position;\n      var regionOptions = {\n        fillOpacity: 0.1,\n        strokeWidth: 1,\n        strokeOpacity: 0.2\n      };\n      var MARKER_SIZE = new google.maps.Size(50, 70);\n      var MARKER_ICON = 'https://i.imgur.com/Rhv5xQh.png';\n      return __jsx(Fragment, null, __jsx(Marker, {\n        position: position,\n        title: \"You\",\n        options: {\n          icon: {\n            url: MARKER_ICON,\n            scaledSize: MARKER_SIZE\n          }\n        }\n      }), __jsx(Circle, {\n        center: position,\n        radius: radius,\n        options: regionOptions\n      }));\n    }\n  }]);\n\n  return UserMarker;\n}(Component);\n\n;\nexport default UserMarker;","map":{"version":3,"sources":["/Users/fatimaaltaf/lighthouse/google_api/realtime-geofencing-app/components/UserMarker.js"],"names":["React","Fragment","Component","Marker","Circle","UserMarker","props","person","id","position","channel","state","bind","setState","radius","regionOptions","fillOpacity","strokeWidth","strokeOpacity","MARKER_SIZE","google","maps","Size","MARKER_ICON","icon","url","scaledSize"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,mBAA/B,C,CAEA;;IAEQC,U;;;;;AAEJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AADiB,sBAEkD,MAAKA,KAFvD;AAAA,yCAETC,MAFS;AAAA,mDAECC,EAFD;AAAA,QAECA,EAFD,sCAEM,IAFN;AAAA,mDAEYC,QAFZ;AAAA,QAEYA,QAFZ,sCAEuB,IAFvB;AAAA,0CAE+BC,OAF/B;AAAA,QAE+BA,OAF/B,oCAEyC,IAFzC;AAIjB,UAAKF,EAAL,GAAUA,EAAV;AACA,UAAKE,OAAL,GAAeA,OAAf;AACA,UAAKC,KAAL,GAAa;AAAEF,MAAAA,QAAQ,EAARA;AAAF,KAAb;AANiB;AAOlB,G,CAED;AACA;;;;;wCACoB;AAAA;;AAClB,WAAKC,OAAL,IAAgB,KAAKA,OAAL,CAAaE,IAAb,CAAkB,SAAlB,EAA6B,gBAAqB;AAAA,+BAAlBL,MAAkB;AAAA,YAAlBA,MAAkB,4BAAT,EAAS;AAAA,YACxDC,EADwD,GACvCD,MADuC,CACxDC,EADwD;AAAA,YACpDC,QADoD,GACvCF,MADuC,CACpDE,QADoD;AAE/DD,QAAAA,EAAE,KAAK,MAAI,CAACA,EAAb,IAAoB,MAAI,CAACK,QAAL,CAAc;AAAEJ,UAAAA,QAAQ,EAARA;AAAF,SAAd,CAApB;AACD,OAHe,CAAhB;AAID,K,CAED;AACA;;;;6BACS;AAAA,UAECK,MAFD,GAEY,KAAKR,KAFjB,CAECQ,MAFD;AAAA,UAGCL,QAHD,GAGc,KAAKE,KAHnB,CAGCF,QAHD;AAIP,UAAMM,aAAa,GAAG;AAAEC,QAAAA,WAAW,EAAE,GAAf;AAAoBC,QAAAA,WAAW,EAAE,CAAjC;AAAoCC,QAAAA,aAAa,EAAE;AAAnD,OAAtB;AAEA,UAAMC,WAAW,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,IAAhB,CAAqB,EAArB,EAAyB,EAAzB,CAApB;AACA,UAAMC,WAAW,GAAG,iCAApB;AAEA,aAAO,MAAC,QAAD,QACL,MAAC,MAAD;AAAQ,QAAA,QAAQ,EAAEd,QAAlB;AAA4B,QAAA,KAAK,EAAC,KAAlC;AAAwC,QAAA,OAAO,EAAE;AAAEe,UAAAA,IAAI,EAAE;AAAEC,YAAAA,GAAG,EAAEF,WAAP;AAAoBG,YAAAA,UAAU,EAAEP;AAAhC;AAAR;AAAjD,QADK,EAEL,MAAC,MAAD;AAAQ,QAAA,MAAM,EAAEV,QAAhB;AAA0B,QAAA,MAAM,EAAEK,MAAlC;AAA0C,QAAA,OAAO,EAAEC;AAAnD,QAFK,CAAP;AAKD;;;;EApCsBb,S;;AAqCxB;AAED,eAAeG,UAAf","sourcesContent":["import React, { Fragment, Component } from 'react';\nimport { Marker, Circle } from 'react-google-maps';\n\n// The UserMarker component stores the position of the current active user in the position property of the component’s state.\n\n  class UserMarker extends Component {\n\n    constructor(props) {\n      super(props);\n      const { person: { id = null, position = null }, channel = null } = this.props;\n\n      this.id = id;\n      this.channel = channel;\n      this.state = { position };\n    }\n\n    // we bind to the transit event on the Pusher channel, and update the state with the new position of the user. \n    // We only update the state when the current user’s position changes.\n    componentDidMount() {\n      this.channel && this.channel.bind('transit', ({ person = {} }) => {\n        const { id, position } = person;\n        (id === this.id) && this.setState({ position });\n      });\n    }\n\n    // we render a red marker icon for the currently active user by setting the MARKER_ICON constant as the marker icon URL.\n    // We also render a Circle region using the user’s current position as center and the radius received as prop.\n    render() {\n\n      const { radius } = this.props;\n      const { position } = this.state;\n      const regionOptions = { fillOpacity: 0.1, strokeWidth: 1, strokeOpacity: 0.2 };\n\n      const MARKER_SIZE = new google.maps.Size(50, 70);\n      const MARKER_ICON = 'https://i.imgur.com/Rhv5xQh.png';\n\n      return <Fragment>\n        <Marker position={position} title=\"You\" options={{ icon: { url: MARKER_ICON, scaledSize: MARKER_SIZE } }} />\n        <Circle center={position} radius={radius} options={regionOptions} />\n      </Fragment>\n\n    }\n  };\n\n  export default UserMarker;"]},"metadata":{},"sourceType":"module"}