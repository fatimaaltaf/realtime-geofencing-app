{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Marker } from 'react-google-maps';\nconst BLACK_MARKER = 'https://i.imgur.com/8dOrls4.png?2';\nconst GREEN_MARKER = 'https://i.imgur.com/9v6uW8U.png'; // The PersonMarker component stores the position of the person in the position property of the component’s state \n// and the position of the current active user in the userPosition property of the state.\n\nclass PersonMarker extends Component {\n  constructor(props) {\n    super(props);\n    const {\n      user: {\n        id: userID,\n        position: userPosition\n      },\n      person: {\n        id = null,\n        position = null\n      },\n      channel = null\n    } = this.props;\n    this.id = id;\n    this.userID = userID;\n    this.channel = channel;\n    this.state = {\n      position,\n      userPosition\n    };\n  } // we bind to the transit event on the Pusher channel, and update the state with the new position of the person or currently active user. \n  // We update the state’s position when the person’s position changes, and the userPosition when the currently active user’s position changes.\n\n\n  componentDidMount() {\n    this.channel && this.channel.bind('transit', ({\n      person = {}\n    }) => {\n      const {\n        id,\n        position\n      } = person;\n      id === this.id && this.setState({\n        position\n      });\n      id === this.userID && this.setState({\n        userPosition: position\n      });\n    });\n  } // withinRegion() method received as prop to check if the person is within the defined circular region of the currently active user. \n  // We then conditionally render a green marker icon if the person is within the region, otherwise, we render a black icon.\n\n\n  render() {\n    const {\n      position,\n      userPosition\n    } = this.state;\n    const {\n      person: {\n        name\n      },\n      radius,\n      withinRegion = f => f\n    } = this.props;\n    const within = !!withinRegion(position)(userPosition, radius);\n    const MARKER_SIZE = new google.maps.Size(25, 35);\n    const MARKER_ICON = within ? GREEN_MARKER : BLACK_MARKER;\n    return __jsx(Marker, {\n      position: position,\n      title: name,\n      options: {\n        icon: {\n          url: MARKER_ICON,\n          scaledSize: MARKER_SIZE\n        }\n      }\n    });\n  }\n\n}\n\n;\nexport default PersonMarker;","map":null,"metadata":{},"sourceType":"module"}