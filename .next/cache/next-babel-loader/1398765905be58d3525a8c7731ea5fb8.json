{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nimport Layout from '../components/Layout';\nimport ChoosePersona from '../components/ChoosePersona';\nimport Map from '../components/Map';\nimport NearbyFriends from '../components/NearbyFriends';\n\nclass IndexPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      id: null,\n      people: []\n    });\n\n    _defineProperty(this, \"endConnection\", () => {\n      this.pusher.disconnect();\n      axios.post(`/offline/${this.state.id}`);\n    });\n\n    _defineProperty(this, \"personaSelected\", id => {\n      this.setState({\n        id\n      });\n      axios.post(`/online/${id}`);\n    });\n\n    _defineProperty(this, \"regionFiltered\", people => this.nearby.updatePeople(people));\n  }\n\n  // This happens before mounting occurs and called before render\n  componentWillMount() {\n    this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    this.channel = this.pusher.subscribe('map-geofencing');\n  } // fetch the people collection from the server by making a GET HTTP request using axios to the /people endpoint.\n  // We then update the state with the people collection gotten from the response.\n\n\n  componentDidMount() {\n    axios.get('/people').then(({\n      data\n    }) => {\n      const {\n        people = []\n      } = data;\n      this.setState({\n        people\n      });\n    });\n    window.onbeforeunload = this.endConnection;\n  }\n\n  componentWillUnmount() {\n    this.endConnection();\n  }\n\n  render() {\n    const {\n      id,\n      people\n    } = this.state;\n    const person = people.find(person => person.id === id) || {};\n    const peopleOffline = people.filter(person => !person.online);\n    return __jsx(Layout, {\n      pageTitle: \"Realtime Geofencing\"\n    }, __jsx(\"main\", {\n      className: \"container-fluid position-absolute h-100 bg-light\"\n    }, id ? __jsx(\"div\", {\n      className: \"row position-absolute w-100 h-100\"\n    }, __jsx(\"section\", {\n      className: \"col-md-9 px-0 border-right border-gray position-relative h-100\"\n    }, __jsx(Map, {\n      person: person,\n      radius: 1000,\n      people: people,\n      channel: this.channel,\n      onRegionFiltered: this.regionFiltered\n    })), __jsx(\"section\", {\n      className: \"col-md-3 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-white px-0\"\n    }, __jsx(NearbyFriends, {\n      ref: elem => this.nearby = elem,\n      person: person\n    }))) : __jsx(ChoosePersona, {\n      count: 5,\n      people: peopleOffline,\n      onSelected: this.personaSelected\n    })));\n  }\n\n}\n\n;\nexport default (() => __jsx(IndexPage, null));","map":{"version":3,"sources":["/Users/fatimaaltaf/lighthouse/google_api/realtime-geofencing-app/pages/index.js"],"names":["React","Component","Fragment","axios","Pusher","Layout","ChoosePersona","Map","NearbyFriends","IndexPage","id","people","pusher","disconnect","post","state","setState","nearby","updatePeople","componentWillMount","process","env","PUSHER_APP_KEY","cluster","PUSHER_APP_CLUSTER","encrypted","channel","subscribe","componentDidMount","get","then","data","window","onbeforeunload","endConnection","componentWillUnmount","render","person","find","peopleOffline","filter","online","regionFiltered","elem","personaSelected"],"mappings":"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","sourcesContent":["\nimport React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nimport Layout from '../components/Layout';\nimport ChoosePersona from '../components/ChoosePersona';\nimport Map from '../components/Map';\nimport NearbyFriends from '../components/NearbyFriends';\n\nclass IndexPage extends Component {\n\n  // Initialize state with two props\n    //id = UUID to identify current user\n    // people = array of people with their respective coordinates\n\n  state = { id: null, people: [] }\n\n  // endConnection() method terminates the current Pusher connection and \n  // also sends an /offline request to the server for the current user. \n  // The endConnection() method is called before the component is unmounted or before the page is unloaded.\n  endConnection = () => {\n    this.pusher.disconnect();\n    axios.post(`/offline/${this.state.id}`);\n  }\n\n  // This happens before mounting occurs and called before render\n  componentWillMount() {\n    this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n\n    this.channel = this.pusher.subscribe('map-geofencing');\n  }\n\n  // fetch the people collection from the server by making a GET HTTP request using axios to the /people endpoint.\n  // We then update the state with the people collection gotten from the response.\n  componentDidMount() {\n    axios.get('/people').then(({ data }) => {\n      const { people = [] } = data;\n      this.setState({ people });\n    });\n\n    window.onbeforeunload = this.endConnection;\n  }\n\n  componentWillUnmount() {\n    this.endConnection();\n  }\n\n  personaSelected = id => {\n    this.setState({ id });\n    axios.post(`/online/${id}`);\n  }\n\n  regionFiltered = people => this.nearby.updatePeople(people)\n\n  render() {\n\n    const { id, people } = this.state;\n    const person = people.find(person => person.id === id) || {};\n    const peopleOffline = people.filter(person => !person.online);\n\n    return (\n      <Layout pageTitle=\"Realtime Geofencing\">\n        <main className=\"container-fluid position-absolute h-100 bg-light\">\n          {\n            id ? <div className=\"row position-absolute w-100 h-100\">\n\n              <section className=\"col-md-9 px-0 border-right border-gray position-relative h-100\">\n                <Map person={person} radius={1000} people={people} channel={this.channel} onRegionFiltered={this.regionFiltered} />\n              </section>\n\n              <section className=\"col-md-3 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-white px-0\">\n                <NearbyFriends ref={elem => this.nearby = elem} person={person} />\n              </section>\n\n            </div>\n            : <ChoosePersona count={5} people={peopleOffline} onSelected={this.personaSelected} />\n          }\n        </main>\n      </Layout>\n    );\n  }\n};\n\nexport default () => <IndexPage />"]},"metadata":{},"sourceType":"module"}