{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Marker } from 'react-google-maps';\nvar BLACK_MARKER = 'https://i.imgur.com/8dOrls4.png?2';\nvar GREEN_MARKER = 'https://i.imgur.com/9v6uW8U.png'; // The PersonMarker component stores the position of the person in the position property of the component’s state \n// and the position of the current active user in the userPosition property of the state.\n\nvar PersonMarker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PersonMarker, _Component);\n\n  function PersonMarker(props) {\n    var _this;\n\n    _classCallCheck(this, PersonMarker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PersonMarker).call(this, props));\n    var _this$props = _this.props,\n        _this$props$user = _this$props.user,\n        userID = _this$props$user.id,\n        userPosition = _this$props$user.position,\n        _this$props$person = _this$props.person,\n        _this$props$person$id = _this$props$person.id,\n        id = _this$props$person$id === void 0 ? null : _this$props$person$id,\n        _this$props$person$po = _this$props$person.position,\n        position = _this$props$person$po === void 0 ? null : _this$props$person$po,\n        _this$props$channel = _this$props.channel,\n        channel = _this$props$channel === void 0 ? null : _this$props$channel;\n    _this.id = id;\n    _this.userID = userID;\n    _this.channel = channel;\n    _this.state = {\n      position: position,\n      userPosition: userPosition\n    };\n    return _this;\n  } // we bind to the transit event on the Pusher channel, and update the state with the new position of the person or currently active user. \n  // We update the state’s position when the person’s position changes, and the userPosition when the currently active user’s position changes.\n\n\n  _createClass(PersonMarker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.channel && this.channel.bind('transit', function (_ref) {\n        var _ref$person = _ref.person,\n            person = _ref$person === void 0 ? {} : _ref$person;\n        var id = person.id,\n            position = person.position;\n        id === _this2.id && _this2.setState({\n          position: position\n        });\n        id === _this2.userID && _this2.setState({\n          userPosition: position\n        });\n      });\n    } // withinRegion() method received as prop to check if the person is within the defined circular region of the currently active user. \n    // We then conditionally render a green marker icon if the person is within the region, otherwise, we render a black icon.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          position = _this$state.position,\n          userPosition = _this$state.userPosition;\n      var _this$props2 = this.props,\n          name = _this$props2.person.name,\n          radius = _this$props2.radius,\n          _this$props2$withinRe = _this$props2.withinRegion,\n          withinRegion = _this$props2$withinRe === void 0 ? function (f) {\n        return f;\n      } : _this$props2$withinRe;\n      var within = !!withinRegion(position)(userPosition, radius);\n      var MARKER_SIZE = new google.maps.Size(25, 35);\n      var MARKER_ICON = within ? GREEN_MARKER : BLACK_MARKER;\n      return __jsx(Marker, {\n        position: position,\n        title: name,\n        options: {\n          icon: {\n            url: MARKER_ICON,\n            scaledSize: MARKER_SIZE\n          }\n        }\n      });\n    }\n  }]);\n\n  return PersonMarker;\n}(Component);\n\n;\nexport default PersonMarker;","map":null,"metadata":{},"sourceType":"module"}