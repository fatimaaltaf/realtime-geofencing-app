{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios';\nimport React, { Fragment, Component } from 'react';\nimport { withGoogleMap, withScriptjs, GoogleMap } from 'react-google-maps';\nimport UserMarker from './UserMarker';\nimport PersonMarker from './PersonMarker';\n\nvar MapContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapContainer, _Component);\n\n  function MapContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MapContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"withinRegion\", function (position, radius) {\n      var to = new google.maps.LatLng(position.lat, position.lng);\n      var distance = google.maps.geometry.spherical.computeDistanceBetween;\n      return function (point) {\n        var from = new google.maps.LatLng(point.lat, point.lng);\n        return distance(from, to) <= radius;\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"analyzeRegion\", function (position, radius) {\n      return function (people) {\n        var _this$props$onRegionF = _this.props.onRegionFiltered,\n            onRegionFiltered = _this$props$onRegionF === void 0 ? function (f) {\n          return f;\n        } : _this$props$onRegionF;\n\n        var withinRegion = _this.withinRegion(position, radius);\n\n        var mappedPeople = people.map(function (person) {\n          var _ref = person || {},\n              position = _ref.position;\n\n          var within = withinRegion(position);\n          return _objectSpread({}, person, {\n            within: within\n          });\n        });\n        onRegionFiltered(mappedPeople);\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          _this$props$person = _this$props.person,\n          id = _this$props$person.id,\n          position = _this$props$person.position,\n          radius = _this$props.radius,\n          _this$props$people = _this$props.people,\n          people = _this$props$people === void 0 ? [] : _this$props$people,\n          _this$props$channel = _this$props.channel,\n          channel = _this$props$channel === void 0 ? null : _this$props$channel;\n      var mapContext = this.map.context['__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED'];\n      var setMapCenter = mapContext.setCenter.bind(mapContext);\n      var lat = position.lat,\n          lng = position.lng;\n      channel && channel.bind('transit', function (_ref2) {\n        var _ref2$person = _ref2.person,\n            person = _ref2$person === void 0 ? {} : _ref2$person,\n            people = _ref2.people;\n        var $id = person.id,\n            $position = person.position;\n        var isUser = id === $id;\n        var center = isUser ? $position : position;\n        isUser && setMapCenter(center);\n\n        _this2.analyzeRegion(center, radius)(people);\n      });\n      this.positionUpdate = setInterval(function () {\n        lat = lat + Math.random() * 0.001;\n        lng = lng + Math.random() * 0.001;\n        axios.post(\"/transit/\".concat(id), {\n          lat: lat,\n          lng: lng\n        });\n      }, 10000);\n      this.analyzeRegion(position, radius)(people);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.positionUpdate);\n    } // Here we render the GoogleMap component passing the position of the current user as the center prop. \n    // We loop through the people collection received by the MapComponent and render different types of makers based on the person.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          _this$props2$person = _this$props2.person,\n          id = _this$props2$person.id,\n          position = _this$props2$person.position,\n          radius = _this$props2.radius,\n          people = _this$props2.people,\n          channel = _this$props2.channel; // ref will give us access to the underlying google.maps.Map instance, which we will need later to update the map properties.\n      // We use UserMarker for the currently active user and the PersonMarker for other people.\n      // We also pass the radius, person and channel props to the marker components. \n      // The channel prop contains a reference to the current Pusher channel subscription.\n      // For the PersonMarker component, we pass in the currently active user to the user prop.\n      // We also pass in an inverted version of the withinRegion() method to the withinRegion prop.\n\n      return __jsx(GoogleMap, {\n        ref: function ref(elem) {\n          return _this3.map = elem;\n        },\n        zoom: 15,\n        center: position\n      }, __jsx(Fragment, null, people.map(function (person, index) {\n        var props = {\n          key: index,\n          radius: radius,\n          person: person,\n          channel: channel\n        };\n\n        var withinRegion = function withinRegion(point) {\n          return function (position, radius) {\n            return _this3.withinRegion(position, radius)(point);\n          };\n        };\n\n        return person.id === id ? __jsx(UserMarker, props) : __jsx(PersonMarker, _extends({\n          user: _this3.props.person,\n          withinRegion: withinRegion\n        }, props));\n      })));\n    }\n  }]);\n\n  return MapContainer;\n}(Component);\n\n;\nexport default withScriptjs(withGoogleMap(MapContainer));","map":{"version":3,"sources":["/Users/fatimaaltaf/lighthouse/google_api/realtime-geofencing-app/components/MapContainer.js"],"names":["axios","React","Fragment","Component","withGoogleMap","withScriptjs","GoogleMap","UserMarker","PersonMarker","MapContainer","position","radius","to","google","maps","LatLng","lat","lng","distance","geometry","spherical","computeDistanceBetween","point","from","people","props","onRegionFiltered","f","withinRegion","mappedPeople","map","person","within","id","channel","mapContext","context","setMapCenter","setCenter","bind","$id","$position","isUser","center","analyzeRegion","positionUpdate","setInterval","Math","random","post","clearInterval","elem","index","key"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,SAAtC,QAAuD,mBAAvD;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;IAEMC,Y;;;;;;;;;;;;;;;;;;mEAMW,UAACC,QAAD,EAAWC,MAAX,EAAsB;AACnC,UAAMC,EAAE,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,MAAhB,CAAuBL,QAAQ,CAACM,GAAhC,EAAqCN,QAAQ,CAACO,GAA9C,CAAX;AACA,UAAMC,QAAQ,GAAGL,MAAM,CAACC,IAAP,CAAYK,QAAZ,CAAqBC,SAArB,CAA+BC,sBAAhD;AACA,aAAO,UAAAC,KAAK,EAAI;AACd,YAAMC,IAAI,GAAG,IAAIV,MAAM,CAACC,IAAP,CAAYC,MAAhB,CAAuBO,KAAK,CAACN,GAA7B,EAAkCM,KAAK,CAACL,GAAxC,CAAb;AACA,eAAOC,QAAQ,CAACK,IAAD,EAAOX,EAAP,CAAR,IAAsBD,MAA7B;AACD,OAHD;AAID,K;;oEAEe,UAACD,QAAD,EAAWC,MAAX;AAAA,aAAsB,UAAAa,MAAM,EAAI;AAAA,oCACR,MAAKC,KADG,CACtCC,gBADsC;AAAA,YACtCA,gBADsC,sCACnB,UAAAC,CAAC;AAAA,iBAAIA,CAAJ;AAAA,SADkB;;AAE9C,YAAMC,YAAY,GAAG,MAAKA,YAAL,CAAkBlB,QAAlB,EAA4BC,MAA5B,CAArB;;AAEA,YAAMkB,YAAY,GAAGL,MAAM,CAACM,GAAP,CAAW,UAAAC,MAAM,EAAI;AAAA,qBACnBA,MAAM,IAAI,EADS;AAAA,cAChCrB,QADgC,QAChCA,QADgC;;AAExC,cAAMsB,MAAM,GAAGJ,YAAY,CAAClB,QAAD,CAA3B;AACA,mCAAYqB,MAAZ;AAAoBC,YAAAA,MAAM,EAANA;AAApB;AACD,SAJoB,CAArB;AAMAN,QAAAA,gBAAgB,CAACG,YAAD,CAAhB;AACD,OAXe;AAAA,K;;;;;;;wCAaI;AAAA;;AAAA,wBAEwD,KAAKJ,KAF7D;AAAA,2CAEVM,MAFU;AAAA,UAEAE,EAFA,sBAEAA,EAFA;AAAA,UAEIvB,QAFJ,sBAEIA,QAFJ;AAAA,UAEgBC,MAFhB,eAEgBA,MAFhB;AAAA,2CAEwBa,MAFxB;AAAA,UAEwBA,MAFxB,mCAEiC,EAFjC;AAAA,4CAEqCU,OAFrC;AAAA,UAEqCA,OAFrC,oCAE+C,IAF/C;AAGlB,UAAMC,UAAU,GAAG,KAAKL,GAAL,CAASM,OAAT,CAAiB,8CAAjB,CAAnB;AACA,UAAMC,YAAY,GAAGF,UAAU,CAACG,SAAX,CAAqBC,IAArB,CAA0BJ,UAA1B,CAArB;AAJkB,UAMZnB,GANY,GAMCN,QAND,CAMZM,GANY;AAAA,UAMPC,GANO,GAMCP,QAND,CAMPO,GANO;AAQlBiB,MAAAA,OAAO,IAAIA,OAAO,CAACK,IAAR,CAAa,SAAb,EAAwB,iBAA6B;AAAA,iCAA1BR,MAA0B;AAAA,YAA1BA,MAA0B,6BAAjB,EAAiB;AAAA,YAAbP,MAAa,SAAbA,MAAa;AAAA,YAClDgB,GADkD,GACrBT,MADqB,CACtDE,EADsD;AAAA,YACnCQ,SADmC,GACrBV,MADqB,CAC7CrB,QAD6C;AAE9D,YAAMgC,MAAM,GAAGT,EAAE,KAAKO,GAAtB;AACA,YAAMG,MAAM,GAAGD,MAAM,GAAGD,SAAH,GAAe/B,QAApC;AAEAgC,QAAAA,MAAM,IAAIL,YAAY,CAACM,MAAD,CAAtB;;AACA,QAAA,MAAI,CAACC,aAAL,CAAmBD,MAAnB,EAA2BhC,MAA3B,EAAmCa,MAAnC;AACD,OAPU,CAAX;AASA,WAAKqB,cAAL,GAAsBC,WAAW,CAAC,YAAM;AACtC9B,QAAAA,GAAG,GAAGA,GAAG,GAAG+B,IAAI,CAACC,MAAL,KAAgB,KAA5B;AACA/B,QAAAA,GAAG,GAAGA,GAAG,GAAG8B,IAAI,CAACC,MAAL,KAAgB,KAA5B;AAEAhD,QAAAA,KAAK,CAACiD,IAAN,oBAAuBhB,EAAvB,GAA6B;AAAEjB,UAAAA,GAAG,EAAHA,GAAF;AAAOC,UAAAA,GAAG,EAAHA;AAAP,SAA7B;AACD,OALgC,EAK9B,KAL8B,CAAjC;AAOA,WAAK2B,aAAL,CAAmBlC,QAAnB,EAA6BC,MAA7B,EAAqCa,MAArC;AAED;;;2CAEsB;AACrB0B,MAAAA,aAAa,CAAC,KAAKL,cAAN,CAAb;AACD,K,CAED;AACA;;;;6BAES;AAAA;;AAAA,yBACuD,KAAKpB,KAD5D;AAAA,6CACCM,MADD;AAAA,UACWE,EADX,uBACWA,EADX;AAAA,UACevB,QADf,uBACeA,QADf;AAAA,UAC2BC,MAD3B,gBAC2BA,MAD3B;AAAA,UACmCa,MADnC,gBACmCA,MADnC;AAAA,UAC2CU,OAD3C,gBAC2CA,OAD3C,EAGP;AAEA;AACA;AACA;AAEA;AACA;;AAEA,aACE,MAAC,SAAD;AAAW,QAAA,GAAG,EAAE,aAAAiB,IAAI;AAAA,iBAAI,MAAI,CAACrB,GAAL,GAAWqB,IAAf;AAAA,SAApB;AAAyC,QAAA,IAAI,EAAE,EAA/C;AAAmD,QAAA,MAAM,EAAEzC;AAA3D,SACE,MAAC,QAAD,QACIc,MAAM,CAACM,GAAP,CAAW,UAACC,MAAD,EAASqB,KAAT,EAAmB;AAE9B,YAAM3B,KAAK,GAAG;AAAE4B,UAAAA,GAAG,EAAED,KAAP;AAAczC,UAAAA,MAAM,EAANA,MAAd;AAAsBoB,UAAAA,MAAM,EAANA,MAAtB;AAA8BG,UAAAA,OAAO,EAAPA;AAA9B,SAAd;;AACA,YAAMN,YAAY,GAAG,SAAfA,YAAe,CAAAN,KAAK;AAAA,iBAAI,UAACZ,QAAD,EAAWC,MAAX;AAAA,mBAAsB,MAAI,CAACiB,YAAL,CAAkBlB,QAAlB,EAA4BC,MAA5B,EAAoCW,KAApC,CAAtB;AAAA,WAAJ;AAAA,SAA1B;;AAEA,eAAQS,MAAM,CAACE,EAAP,KAAcA,EAAf,GACH,MAAC,UAAD,EAAgBR,KAAhB,CADG,GAEH,MAAC,YAAD;AAAc,UAAA,IAAI,EAAE,MAAI,CAACA,KAAL,CAAWM,MAA/B;AAAuC,UAAA,YAAY,EAAEH;AAArD,WAAuEH,KAAvE,EAFJ;AAID,OATC,CADJ,CADF,CADF;AAgBD;;;;EA3FwBtB,S;;AA6F1B;AAED,eAAeE,YAAY,CAACD,aAAa,CAACK,YAAD,CAAd,CAA3B","sourcesContent":["import axios from 'axios';\nimport React, { Fragment, Component } from 'react';\nimport { withGoogleMap, withScriptjs, GoogleMap } from 'react-google-maps';\n\nimport UserMarker from './UserMarker';\nimport PersonMarker from './PersonMarker';\n\nclass MapContainer extends Component {\n\n  //withinRegion() method enables us to determine if a point is within a defined circular region.\n  // It takes the center and radius of the region as its arguments, and returns a function. \n  // The returned function takes a point as argument and returns if the point is in the region.\n\n  withinRegion = (position, radius) => {\n    const to = new google.maps.LatLng(position.lat, position.lng);\n    const distance = google.maps.geometry.spherical.computeDistanceBetween;\n    return point => {\n      const from = new google.maps.LatLng(point.lat, point.lng);\n      return distance(from, to) <= radius;\n    }\n  }\n\n  analyzeRegion = (position, radius) => people => {\n    const { onRegionFiltered = f => f } = this.props;\n    const withinRegion = this.withinRegion(position, radius);\n\n    const mappedPeople = people.map(person => {\n      const { position } = person || {};\n      const within = withinRegion(position);\n      return { ...person, within };\n    });\n\n    onRegionFiltered(mappedPeople);\n  }\n\n  componentDidMount() {\n\n    const { person: { id, position }, radius, people = [], channel = null } = this.props;\n    const mapContext = this.map.context['__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED'];\n    const setMapCenter = mapContext.setCenter.bind(mapContext);\n\n    let { lat, lng } = position;\n\n    channel && channel.bind('transit', ({ person = {}, people }) => {\n      const { id: $id, position: $position } = person;\n      const isUser = id === $id;\n      const center = isUser ? $position : position;\n\n      isUser && setMapCenter(center);\n      this.analyzeRegion(center, radius)(people);\n    });\n\n    this.positionUpdate = setInterval(() => {\n      lat = lat + Math.random() * 0.001;\n      lng = lng + Math.random() * 0.001;\n\n      axios.post(`/transit/${id}`, { lat, lng });\n    }, 10000);\n\n    this.analyzeRegion(position, radius)(people);\n\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.positionUpdate);\n  }\n\n  // Here we render the GoogleMap component passing the position of the current user as the center prop. \n  // We loop through the people collection received by the MapComponent and render different types of makers based on the person.\n\n  render() {\n    const { person: { id, position }, radius, people, channel } = this.props;\n\n    // ref will give us access to the underlying google.maps.Map instance, which we will need later to update the map properties.\n\n    // We use UserMarker for the currently active user and the PersonMarker for other people.\n    // We also pass the radius, person and channel props to the marker components. \n    // The channel prop contains a reference to the current Pusher channel subscription.\n\n    // For the PersonMarker component, we pass in the currently active user to the user prop.\n    // We also pass in an inverted version of the withinRegion() method to the withinRegion prop.\n\n    return (\n      <GoogleMap ref={elem => this.map = elem} zoom={15} center={position}>\n        <Fragment>\n          { people.map((person, index) => {\n\n            const props = { key: index, radius, person, channel };\n            const withinRegion = point => (position, radius) => this.withinRegion(position, radius)(point);\n\n            return (person.id === id)\n              ? <UserMarker {...props} />\n              : <PersonMarker user={this.props.person} withinRegion={withinRegion} {...props} />\n\n          }) }\n        </Fragment>\n      </GoogleMap>\n    );\n  }\n\n};\n\nexport default withScriptjs(withGoogleMap(MapContainer));"]},"metadata":{},"sourceType":"module"}